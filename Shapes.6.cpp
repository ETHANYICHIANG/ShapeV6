//Programmer: Ethan Chiang//Programmer ID: 1538719#include <fstream>#include <iostream>#include <iterator>#include <string>#include <sstream>#include <vector>using namespace std;#include <cstdlib> // atof#include <cmath>//pow(), sqtr()#include "iShapes.h"//prototypesvector<string> parseString(string);// get token functionint checkShape(string);// check if shape validdouble tokenToNum(string);// convert token string into float numbersvoid fillBag(vector<string>&, vector<const Shape*>&);// fill bag functionint main(){  cout << "Programmer: Ethan Chiang\n"       << "Programmer's ID: 1538719\n"       << "File: " << __FILE__ << "\n\n";  ifstream fin;// intput file object  ofstream fout;// output  fin.open("Shapes.input.txt");// open for fillBag  if(!fin.good()) throw "FIEL ERROR!";  string str; // to store a single line of input from file  vector<string> tokens; // store tokens  vector<const Shape*> myBag; // bag of shapes  while(!fin.eof()) // to get data from txt file and fill bag  {    getline(fin, str);// get string from file    tokens = parseString(str);// turn string into tokens    if(tokens.size() != 0)// ignore empty line      fillBag(tokens, myBag); // fill bag and type-bag  }  fin.close();// close for fillBag  // cout loop  for(int i = 0; i < myBag.size(); i++)// cout loop    cout << myBag[i];
  fout.open("Shapes.output.txt");// open for fout loop  // fout loop  for(int i = 0; i < myBag.size(); i++)// fout loop    fout << myBag[i];  fout << "EOF";// end of file mark  fout.close();// close for fout loop  for(int i = 0; i < myBag.size(); i++)// kill loop    delete myBag[i];  return 0;// end of main}// functionsvector<string> parseString(string str)// get tokens function{  stringstream s(str);  istream_iterator<string> begin(s), end;  return vector<string>(begin, end);}int checkShape(string shape)// return 0 if not valid{  if(shape == "SQUARE")    return 1;  else if(shape == "RECTANGLE")    return 2;  else if(shape == "CIRCLE")    return 3;  else if(shape == "TRIANGLE")    return 4;  else if(shape == "CUBE")    return 5;  else if(shape == "BOX")    return 6;  else if(shape == "CYLINDER")    return 7;  else if(shape == "PRISM")    return 8;  else if (shape == "EOF")    return -1;  else    return 0;}void fillBag(vector<string>& tokens, vector<const Shape*>& myBag){  switch(checkShape(tokens[0]))  {    case -1://EOF      break;    case 0://invalid shape      cout << tokens[0] << " invalid object\n";      break;    case 1://square      myBag.push_back(new Square(tokens));      break;    case 2:// rectangle      myBag.push_back(new Rectangle(tokens));      break;    case 3:// circle      myBag.push_back(new Circle(tokens));      break;    case 4:// triangle      myBag.push_back(new Triangle(tokens));      break;    case 5:// cube      myBag.push_back(new Cube(tokens));      break;    case 6:// box      myBag.push_back(new Box(tokens));      break;    case 7:// cylinder      myBag.push_back(new Cylinder(tokens));      break;    case 8:// prism      myBag.push_back(new Prism(tokens));      break;  }}